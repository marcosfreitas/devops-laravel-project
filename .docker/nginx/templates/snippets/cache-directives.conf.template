set $skip_cache 0;

# POST requests and urls with a query string should always go to PHP
if ($request_method = POST) {
    set $skip_cache 1;
}
if ($query_string != "") {
    set $skip_cache 1;
}

# Wordpress Cache configuration


# Don't cache uris containing the following segments
if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {
    set $skip_cache 1;
}

# Don't use the cache for logged in users or recent commenters
if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
    set $skip_cache 1;
}

# "punching a hole" through the cache
# To support Pragma: no-cache sent by clients and force touch the resource without cache
# and Acessible as http://www.example.com/?nocache=true
fastcgi_cache_bypass $skip_cache $http_pragma $cookie_nocache $arg_nocache;
fastcgi_no_cache $skip_cache;

# https://www.nginx.com/blog/nginx-caching-guide/#proxy_cache_path
add_header X-Cache-Status $upstream_cache_status;

# @info using predefined keys_zone at app.conf
fastcgi_cache APPLICATION;

fastcgi_cache_revalidate on;

# 200 301 302 statuses are cached by 1 minute
fastcgi_cache_valid 1m;
# 404 status
fastcgi_cache_valid 404 5s;

# delivering Cached Content When the Origin is Down
fastcgi_cache_use_stale error timeout invalid_header updating http_500 http_503;
fastcgi_cache_background_update on;

# only one request at a time will be allowed to populate a new cache element
fastcgi_cache_key "$scheme$request_method$host$request_uri";
fastcgi_cache_lock on;

# add header to show if the response is cached
add_header rt-Fastcgi-Cache $upstream_cache_status;
